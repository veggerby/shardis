<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0;net9.0</TargetFrameworks>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <PropertyGroup>
    <PackageId>Shardis.Query</PackageId>
    <Version>0.1.0</Version>
    <Description>Core query primitives (merge enumerators, LINQ MVP scaffolding) used by Shardis provider packages.</Description>
    <PackageTags>shardis;sharding;query;linq;merge;partitioning</PackageTags>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageReleaseNotes>Initial release. Full notes: https://github.com/veggerby/shardis/blob/main/CHANGELOG.md#010---2025-08-25</PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="icon.png" Pack="true" PackagePath="" Condition="Exists('icon.png')" />
    <None Include="README.md" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Shardis.Query.Tests" />
    <InternalsVisibleTo Include="Shardis.Query.EntityFrameworkCore" />
    <InternalsVisibleTo Include="Shardis.Query.InMemory" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="../Shardis/Shardis.csproj" />
  </ItemGroup>

  <!-- Guard: fail build if forbidden provider namespaces leak into core -->
  <Target Name="EnforceProviderFreeCore" BeforeTargets="Build">
    <!--
      Guard: ensure no provider-specific namespaces leak into the core query assembly.
      We only inspect real source files (exclude obj/bin) and only flag explicit using directives.
    -->
    <Exec Command="bash -c &quot;if find '$(MSBuildProjectDirectory)' -type f -name '*.cs' ! -path '*/obj/*' ! -path '*/bin/*' -print0 \
        | xargs -0 grep -n -E '^using (Microsoft\\.EntityFrameworkCore|Marten)\\b' >/dev/null; then \
          echo 'Provider reference detected in core (Shardis.Query)'; exit 1; else exit 0; fi&quot;" />
  </Target>

</Project>
