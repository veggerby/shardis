name: Bench Smoke

on:
  pull_request:
  workflow_dispatch:

jobs:
  bench-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore Shardis.sln

      - name: Build
        run: dotnet build --configuration Release --no-restore Shardis.sln

      - name: Run merge smoke benchmark
        run: dotnet run -c Release --project benchmarks/Shardis.Benchmarks.csproj -- --filter *MergeEnumeratorBenchmarks.OrderedStreaming_FirstItemLatency* --iterationCount 1 --warmupCount 0

      - name: Run query smoke benchmark
        run: dotnet run -c Release --project benchmarks/Shardis.Benchmarks.csproj -- --filter *QueryBenchmarks.ShardQuery_WhereSelect_Count* --iterationCount 1 --warmupCount 0

      - name: Run pipeline cache benchmark (single iteration)
        id: pipeline_cache_bench
        run: dotnet run -c Release --project benchmarks/Shardis.Benchmarks.csproj -- --filter *PipelineCacheBenchmarks* --iterationCount 1 --warmupCount 0

      - name: List BenchmarkDotNet artifacts (debug)
        if: ${{ always() && steps.pipeline_cache_bench.outcome == 'success' }}
        run: |
          echo "=== BenchmarkDotNet artifact tree ==="
          (ls -R benchmarks/BenchmarkDotNet.Artifacts || true)

      - name: Archive pipeline cache results
        if: ${{ always() && steps.pipeline_cache_bench.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-cache-bench
          path: |
            benchmarks/BenchmarkDotNet.Artifacts/**/*.log
            benchmarks/BenchmarkDotNet.Artifacts/**/*.txt
            benchmarks/**/*compilecount*.txt

      # - name: Validate pipeline cache compile count delta
      #   if: ${{ always() && steps.pipeline_cache_bench.outcome == 'success' }}
      #   run: |
      #     set -e
      #     # Be flexible about where/how the file is named
      #     file=$(find benchmarks -type f -iname '*compilecount*.txt' | head -n1 || true)
      #     if [ -z "$file" ]; then
      #       echo "Missing compile count file (looked for *compilecount*.txt under ./benchmarks)."
      #       echo "Available files:"
      #       (ls -R benchmarks || true)
      #       exit 1
      #     fi
      #     echo "Using compile count file: $file"
      #     lines=$(wc -l < "$file")
      #     if [ "$lines" -lt 2 ]; then echo "Need at least two lines of compile counts"; exit 1; fi
      #     cached=$(head -n1 "$file")
      #     uncached=$(tail -n1 "$file")
      #     if [ "$uncached" -le "$cached" ]; then echo "Expected uncached compile count > cached (uncached=$uncached cached=$cached)"; exit 1; fi
      #     echo "Compile count check passed (cached=$cached uncached=$uncached)"

  purity-guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore Shardis.sln

      - name: Pack Core Query
        run: dotnet pack src/Shardis.Query/Shardis.Query.csproj -o artifact --no-build -c Release || dotnet build src/Shardis.Query/Shardis.Query.csproj -c Release && dotnet pack src/Shardis.Query/Shardis.Query.csproj -o artifact -c Release

      - name: Inspect nuspec for provider deps
        run: |
          set -e
          f=$(ls artifact/Shardis.Query*.nupkg)
          mkdir extract && cd extract
          unzip -q ../$f
          if grep -E 'EntityFramework|Marten' -r ./*.nuspec; then echo "Found forbidden provider dependency in Shardis.Query"; exit 1; fi