name: Marten Integration

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  marten-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shardis
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Restore
        run: dotnet restore Shardis.sln
      - name: Build
        run: dotnet build Shardis.sln --configuration Release --no-restore
      - name: Test Marten integration
        env:
          POSTGRES_CONNECTION: Host=localhost;Port=5432;Username=postgres;Password=postgres;Database=shardis
        run: dotnet test test/Shardis.Marten.Tests/Shardis.Marten.Tests.csproj -c Release --no-build --logger "trx;LogFileName=marten.trx"
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: marten-test-results
          path: test/Shardis.Marten.Tests/TestResults

  adaptive-bench-smoke:
    runs-on: ubuntu-latest
    needs: marten-tests
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shardis
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore Shardis.sln
      - name: Build
        run: dotnet build benchmarks/Shardis.Benchmarks.csproj -c Release --no-restore
      - name: Run adaptive paging smoke benchmark (single iteration)
        env:
          POSTGRES_CONNECTION: Host=localhost;Port=5432;Username=postgres;Password=postgres;Database=shardis
        run: |
          dotnet run -c Release --project benchmarks/Shardis.Benchmarks.csproj -- --filter *AdaptivePagingBenchmarks* --maxIterationCount 1 --minIterationCount 1 --warmupCount 0 --job short
          dotnet run -c Release --project benchmarks/Shardis.Benchmarks.csproj -- --filter *AdaptivePagingAllocationsBenchmarks* --maxIterationCount 1 --minIterationCount 1 --warmupCount 0 --exporters json --job short
      - name: Check adaptive paging allocation delta
        env:
          ADAPTIVE_ALLOC_MAX_PCT: 20
          ADAPTIVE_ALLOC_MIN_BYTES: 4096
        run: |
          python3 .github/scripts/check_adaptive_alloc.py || echo "Allocation delta check reported failure (non-blocking for now)"
      - name: Upload allocation delta report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: adaptive-allocation-delta
          path: ADAPTIVE-ALLOC-DELTA.md
      - name: Upload adaptive benchmark summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: adaptive-paging-bench
          path: benchmarks/BenchmarkDotNet.Artifacts