[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/veggerby/shardis")]
[assembly: System.Resources.NeutralResourcesLanguage("en")]
namespace Shardis.Query.Marten
{
    public sealed class AdaptiveMartenMaterializer : Shardis.Query.Marten.IQueryableShardMaterializer
    {
        public AdaptiveMartenMaterializer(int minPageSize = 64, int maxPageSize = 8192, double targetBatchMilliseconds = 75, double growFactor = 1.5, double shrinkFactor = 0.5, Shardis.Query.Diagnostics.IAdaptivePagingObserver? observer = null) { }
        [System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(Shardis.Query.Marten.AdaptiveMartenMaterializer.<ToAsyncEnumerable>d__11<T>))]
        public System.Collections.Generic.IAsyncEnumerable<T> ToAsyncEnumerable<T>(System.Linq.IQueryable<T> query, [System.Runtime.CompilerServices.EnumeratorCancellation] System.Threading.CancellationToken ct)
            where T :  notnull { }
    }
    public interface IQueryableShardMaterializer
    {
        System.Collections.Generic.IAsyncEnumerable<T> ToAsyncEnumerable<T>(System.Linq.IQueryable<T> query, System.Threading.CancellationToken ct)
            where T :  notnull;
    }
    public sealed class MartenMaterializer : Shardis.Query.Marten.IQueryableShardMaterializer
    {
        public MartenMaterializer(int pageSize = 512) { }
        [System.Runtime.CompilerServices.AsyncIteratorStateMachine(typeof(Shardis.Query.Marten.MartenMaterializer.<ToAsyncEnumerable>d__2<T>))]
        public System.Collections.Generic.IAsyncEnumerable<T> ToAsyncEnumerable<T>(System.Linq.IQueryable<T> query, [System.Runtime.CompilerServices.EnumeratorCancellation] System.Threading.CancellationToken ct)
            where T :  notnull { }
    }
}