[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/veggerby/shardis")]
[assembly: System.Resources.NeutralResourcesLanguage("en")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("Shardis.Query.Tests")]
namespace Shardis.Query.InMemory.Execution
{
    public sealed class InMemoryShardQueryExecutor : Shardis.Query.Execution.IShardQueryExecutor
    {
        public InMemoryShardQueryExecutor(System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IEnumerable<object>> shards, System.Func<System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<object>>, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<object>> merge, Shardis.Query.Diagnostics.IQueryMetricsObserver? metrics = null) { }
        public Shardis.Query.IShardQueryCapabilities Capabilities { get; }
        public static int TotalCompiledPipelines { get; }
        public System.Collections.Generic.IAsyncEnumerable<TResult> ExecuteAsync<TResult>(Shardis.Query.QueryModel model, System.Threading.CancellationToken ct = default) { }
    }
}