[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/veggerby/shardis")]
[assembly: System.Resources.NeutralResourcesLanguage("en")]
namespace Shardis.Redis.Factories
{
    public sealed class RedisShardFactory : Shardis.Factories.IShardFactory<StackExchange.Redis.IDatabase>
    {
        public RedisShardFactory(System.Collections.Generic.IReadOnlyDictionary<Shardis.Model.ShardId, StackExchange.Redis.IConnectionMultiplexer> muxes) { }
        public System.Threading.Tasks.ValueTask<StackExchange.Redis.IDatabase> CreateAsync(Shardis.Model.ShardId shard, System.Threading.CancellationToken ct = default) { }
    }
}
namespace Shardis.Redis
{
    public class RedisShardMapStore<TKey> : Shardis.Persistence.IShardMapStore<TKey>
        where TKey :  notnull, System.IEquatable<TKey>
    {
        public RedisShardMapStore(string connectionString) { }
        public Shardis.Model.ShardMap<TKey> AssignShardToKey(Shardis.Model.ShardKey<TKey> shardKey, Shardis.Model.ShardId shardId) { }
        public bool TryAssignShardToKey(Shardis.Model.ShardKey<TKey> shardKey, Shardis.Model.ShardId shardId, out Shardis.Model.ShardMap<TKey> shardMap) { }
        public bool TryGetOrAdd(Shardis.Model.ShardKey<TKey> shardKey, System.Func<Shardis.Model.ShardId> valueFactory, out Shardis.Model.ShardMap<TKey> shardMap) { }
        public bool TryGetShardIdForKey(Shardis.Model.ShardKey<TKey> shardKey, out Shardis.Model.ShardId shardId) { }
    }
}