[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/veggerby/shardis")]
[assembly: System.Resources.NeutralResourcesLanguage("en")]
namespace Shardis.DependencyInjection
{
    public static class ShardFactoryUseExtensions
    {
        public static System.Threading.Tasks.ValueTask UseAsync<T>(this Shardis.Factories.IShardFactory<T> factory, Shardis.Model.ShardId shard, System.Func<T, System.Threading.Tasks.ValueTask> action)
            where T : System.IAsyncDisposable { }
        public static System.Threading.Tasks.ValueTask<TResult> UseAsync<T, TResult>(this Shardis.Factories.IShardFactory<T> factory, Shardis.Model.ShardId shard, System.Func<T, System.Threading.Tasks.ValueTask<TResult>> action)
            where T : System.IAsyncDisposable { }
    }
    public static class ShardServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddShard<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Shardis.Model.ShardId shard, System.Func<Shardis.Model.ShardId, T> create) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddShard<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Shardis.Model.ShardId shard, System.Func<System.IServiceProvider, Shardis.Model.ShardId, System.Threading.Tasks.ValueTask<T>> createAsync) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddShardInstance<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Shardis.Model.ShardId shard, T instance) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddShards<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, int count, System.Func<Shardis.Model.ShardId, T> create) { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddShards<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, int count, System.Func<System.IServiceProvider, Shardis.Model.ShardId, System.Threading.Tasks.ValueTask<T>> createAsync) { }
        public static System.Collections.Generic.IReadOnlyCollection<Shardis.Model.ShardId> GetRegisteredShards<T>(this System.IServiceProvider sp) { }
    }
}