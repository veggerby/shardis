[assembly: System.Reflection.AssemblyMetadata("RepositoryUrl", "https://github.com/veggerby/shardis")]
[assembly: System.Resources.NeutralResourcesLanguage("en")]
namespace Shardis.Query.EntityFrameworkCore
{
    public sealed class EfCoreExecutionOptions
    {
        public EfCoreExecutionOptions() { }
        public int? ChannelCapacity { get; init; }
        public int? Concurrency { get; init; }
        public bool DisposeContextPerQuery { get; init; }
        public System.TimeSpan? PerShardCommandTimeout { get; init; }
    }
    public static class EfCoreShardQueryExecutor
    {
        public static Shardis.Query.Execution.IShardQueryExecutor CreateOrdered<TContext, TOrder>(int shardCount, Shardis.Factories.IShardFactory<TContext> contextFactory, System.Linq.Expressions.Expression<System.Func<TOrder, object>> orderKey, bool descending = false, Shardis.Query.EntityFrameworkCore.EfCoreExecutionOptions? options = null)
            where TContext : Microsoft.EntityFrameworkCore.DbContext { }
        public static Shardis.Query.Execution.IShardQueryExecutor CreateUnordered(int shardCount, Shardis.Factories.IShardFactory<Microsoft.EntityFrameworkCore.DbContext> contextFactory, Shardis.Query.EntityFrameworkCore.EfCoreExecutionOptions? options = null) { }
        public static Shardis.Query.Execution.IShardQueryExecutor CreateUnordered<TContext>(int shardCount, Shardis.Factories.IShardFactory<TContext> contextFactory, Shardis.Query.EntityFrameworkCore.EfCoreExecutionOptions? options = null)
            where TContext : Microsoft.EntityFrameworkCore.DbContext { }
    }
    public static class ServiceCollectionExtensions
    {
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddShardisEfCoreOrdered<TContext, TOrder>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, int shardCount, Shardis.Factories.IShardFactory<TContext> contextFactory, System.Linq.Expressions.Expression<System.Func<TOrder, object>> orderKey, bool descending = false, Shardis.Query.EntityFrameworkCore.EfCoreExecutionOptions? options = null)
            where TContext : Microsoft.EntityFrameworkCore.DbContext { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddShardisEfCoreUnordered<TContext>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, int shardCount, Shardis.Factories.IShardFactory<TContext> contextFactory, Shardis.Query.EntityFrameworkCore.EfCoreExecutionOptions? options = null)
            where TContext : Microsoft.EntityFrameworkCore.DbContext { }
        public static Microsoft.Extensions.DependencyInjection.IServiceCollection DecorateShardQueryFailureStrategy(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Shardis.Query.Execution.FailureHandling.IShardQueryFailureStrategy strategy) { }
    }
}
namespace Shardis.Query.EntityFrameworkCore.Execution
{
    public sealed class EntityFrameworkCoreShardQueryExecutor : Shardis.Query.Execution.IShardQueryExecutor
    {
        public EntityFrameworkCoreShardQueryExecutor(int shardCount, Shardis.Factories.IShardFactory<Microsoft.EntityFrameworkCore.DbContext> contextFactory, System.Func<System.Collections.Generic.IEnumerable<System.Collections.Generic.IAsyncEnumerable<object>>, System.Threading.CancellationToken, System.Collections.Generic.IAsyncEnumerable<object>> merge, Shardis.Query.Diagnostics.IQueryMetricsObserver? metrics = null, int? commandTimeoutSeconds = default, int? maxConcurrency = default, bool disposeContextPerQuery = true, Shardis.Query.Diagnostics.IShardisQueryMetrics? queryMetrics = null, int? channelCapacity = default) { }
        public Shardis.Query.IShardQueryCapabilities Capabilities { get; }
        public System.Collections.Generic.IAsyncEnumerable<TResult> ExecuteAsync<TResult>(Shardis.Query.QueryModel model, System.Threading.CancellationToken ct = default) { }
    }
}
namespace Shardis.Query.EntityFrameworkCore.Factories
{
    public sealed class EntityFrameworkCoreShardFactory<TContext> : Shardis.Factories.IShardFactory<TContext>
        where TContext : Microsoft.EntityFrameworkCore.DbContext
    {
        public EntityFrameworkCoreShardFactory(System.Func<Shardis.Model.ShardId, Microsoft.EntityFrameworkCore.DbContextOptions<TContext>> optionsFactory) { }
        public TContext Create(Shardis.Model.ShardId shard) { }
        public System.Threading.Tasks.ValueTask<TContext> CreateAsync(Shardis.Model.ShardId shard, System.Threading.CancellationToken ct = default) { }
    }
    public sealed class PooledEntityFrameworkCoreShardFactory<TContext> : Shardis.Factories.IShardFactory<TContext>
        where TContext : Microsoft.EntityFrameworkCore.DbContext
    {
        public PooledEntityFrameworkCoreShardFactory(System.Collections.Generic.IReadOnlyDictionary<Shardis.Model.ShardId, Microsoft.EntityFrameworkCore.IDbContextFactory<TContext>> perShard) { }
        public TContext Create(Shardis.Model.ShardId shard) { }
        public System.Threading.Tasks.ValueTask<TContext> CreateAsync(Shardis.Model.ShardId shard, System.Threading.CancellationToken ct = default) { }
    }
}